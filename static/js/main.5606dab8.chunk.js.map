{"version":3,"sources":["Assets/create.svg","Assets/read.svg","Components/Home.js","Components/Header.js","Components/QuoteComponent.js","Components/Reading.js","Components/CreatorComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","render","id","className","href","src","read","alt","create","Header","props","useState","collapsed","setCollapsed","Navbar","color","light","NavbarBrand","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","NavItem","NavLink","Quote","state","quoteData","authorData","refreshPage","bind","fetch","then","response","json","data","setState","content","author","window","location","reload","this","Button","Component","Reading","Creator","handleChange","event","target","name","value","yourQuote","yourName","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","onChange","App","path","component","exact","to","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5606dab8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/create.aea1e75e.svg\";","module.exports = __webpack_public_path__ + \"static/media/read.f375b15b.svg\";","import React from 'react'\nimport { render } from '@testing-library/react';\nimport create from '../Assets/create.svg'\nimport read from '../Assets/read.svg'\nimport '../Styles/homepage.css'\n\n\nfunction Home() {\n    render()\n        return(\n            <div>\n            <body id=\"homepage\">\n            <div className=\"cont\">\n                <a href=\"/read\">\n                    <div className=\"card\">\n                    <img src ={read} alt=\"\" />\n                    </div>\n                </a>\n\n                <a href=\"/create\">\n                    <div className=\"card\">\n                    <img src ={create} alt=\"\" className=\"create\"/>\n                    </div>\n                </a>\n            </div>\n            </body>\n            </div>\n        ) \n}\n\nexport default Home;","import React, { useState } from 'react';\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink } from 'reactstrap';\n\nconst Header = (props) => {\n  const [collapsed, setCollapsed] = useState(true);\n\n  const toggleNavbar = () => setCollapsed(!collapsed);\n\n  return (\n    <div>\n      <Navbar color=\"faded\" light>\n        <NavbarBrand href=\"/\" className=\"mr-auto\">Quotify!</NavbarBrand>\n        <NavbarToggler onClick={toggleNavbar} className=\"mr-2\" />\n        <Collapse isOpen={!collapsed} navbar>\n          <Nav navbar>\n            <NavItem>\n              <NavLink href=\"/home\">Home</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"/read\">Read quotes</NavLink>\n            </NavItem>\n          </Nav>\n        </Collapse>\n      </Navbar>\n    </div>\n  );\n}\n\nexport default Header;","import React,{Component} from 'react';\nimport { Button } from 'reactstrap';\n\n\n\nclass Quote extends Component{\n\n    constructor(){\n        super()\n        this.state={\n            quoteData : [],\n            authorData : [],\n        }\n    \n    this.refreshPage = this.refreshPage.bind(this)\n    }\n\n    componentDidMount(){\n        fetch('https://api.quotable.io/random')\n        .then(response => response.json())\n        .then(data => {\n          this.setState({quoteData : data.content})\n          this.setState({authorData : data.author})\n        })\n    }\n\n    refreshPage() {\n        window.location.reload(false)\n        \n    }\n\n\n    render(){\n        return(\n            <div className=\"quotePage\">\n                <div className=\"container box\"> \n                    <h2 className=\"quoteData\">{this.state.quoteData}</h2>  \n                    <h3 className=\"authorData\">-{this.state.authorData}</h3>      \n                </div>\n               \n            \n                <Button color=\"warning\" onClick={this.refreshPage} >Next</Button>\n                \n            </div>\n        )\n    }\n\n\n}\n\n\nexport default Quote\n\n\n\n\n\n","import React from 'react'\nimport Header from './Header'\nimport Quote from './QuoteComponent'\nimport { render } from '@testing-library/react'\n\nfunction Reading(){\n\n\n    render()\n        return(\n        <div className=\"Read\">\n            <Header />\n            <Quote />\n        </div>\n        )\n}\n\nexport default Reading;","import React, { Component } from 'react'\nimport {Button} from 'reactstrap'\nimport { InputGroup, InputGroupText, InputGroupAddon, Input } from 'reactstrap';\nimport Header from './Header'\nimport '../Styles/creator.css'\n\n\n\nclass Creator extends Component{\n    constructor(){\n        super()\n        this.state={\n            yourQuote :\"\",\n            yourName :\"\"\n        }\n    }\n\n    handleChange = (event) => {\n        const { target: { name, value } } = event\n        this.setState({ [name]: value })\n      }\n\n\n    render(){\n        return(\n            <div className=\"createPage\">\n                \n                    <Header />\n                    <div className=\"creating\">\n                    <br/>\n                    <div className=\"customise\">\n                        <InputGroup>\n                            <InputGroupAddon addonType=\"prepend\">\n                            <InputGroupText>Quote</InputGroupText>\n                            </InputGroupAddon>\n                            <Input name=\"yourQuote\" value={this.state.yourQuote} onChange={this.handleChange}/>\n                        </InputGroup>\n                        <br />\n                        <InputGroup>\n                            <InputGroupAddon addonType=\"prepend\">\n                            <InputGroupText>Author</InputGroupText>\n                            </InputGroupAddon>\n                            <Input name=\"yourName\" value={this.state.yourName} onChange={this.handleChange}/>\n                        </InputGroup>\n                        <br />\n                     \n                       \n                    </div>\n                   \n                    <Button color=\"success\" onClick={() => window.location.reload(false)} id=\"btn\">Generate!</Button>\n                    <br/>\n                    <h2 className=\"myQuote\">{this.state.yourQuote}</h2>\n                    <h5 className=\"myAuthor\">{this.state.yourName}</h5>\n                    <div className=\"quotify\">\n                    <img src=\"https://picsum.photos/500/400\" alt=\"\" id=\"quoteImage\"></img>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\n\nexport default Creator;","import React from \"react\";\nimport Home from \"./Components/Home\";\nimport Reading from \"./Components/Reading\";\nimport Creator from \"./Components/CreatorComponent\";\nimport \"./App.css\";\nimport { render } from \"@testing-library/react\";\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\";\n\nfunction App() {\n  render();\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/Quote-App\" component={Home} />\n          <Route exact path=\"/Quote-App/read\" component={Reading} />\n          <Route exact path=\"/Quote-App/create\" component={Creator} />\n          <Redirect to=\"/Quote-App\" />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { HashRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}